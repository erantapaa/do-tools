#!/usr/bin/env python

import os
import sshconfig as S

from os.path import expanduser
import argparse

def make_parser():
  """Create the argument parser."""
  parser = argparse.ArgumentParser()

  subp = parser.add_subparsers(title = "Subcommands", dest="which")

  listp = subp.add_parser("list")

  showip = subp.add_parser("ip")
  showip.add_argument('hosts', nargs='*')
  showip.add_argument("-c", action="store", help="path to ssh config file")

  syncp = subp.add_parser("sync")
  syncp.add_argument("-c", action="store", help="ssh config file to read")
  syncp.add_argument("-o", action="store", help="ssh config file to write")
  syncp.add_argument("-n", action="store_true", dest="dryrun", help="dry run mode - emits config file to STDOUT")
  syncp.add_argument("-v", action="store_true", dest="verbose", help="verbose output")

  return parser

def opt_ssh_config_path(opts):
  if opts.c:
    return opts.c
  else:
    home = expanduser("~")
    return os.path.join(home, ".ssh", "config")

def cmd_sync(opts):
  ssh_config_path = opt_ssh_config_path(opts)

  hentries = S.read_ssh_config(ssh_config_path)

  droplets = []
  for host, ip in S.tugboat_droplets():
    entry = [ "Host {}".format(host), "  # droplet", "  Hostname {}".format(ip), "" ]
    droplets.append( S.Droplet(host = host, ip_addr = ip, entry = S.HostEntry(entry)) )

  (hnew, remove, add) = S.update_droplets(hentries, droplets)

  for h in remove:
    print "removing", h.host()
  for d in add:
    print "adding", d.host, "->", d.ip_addr

  S.add_entries(hnew, [ d.entry for d in add ])
  # hnew is modified by add_entries

  if not opts.dryrun:
    out_path = opts.o or ssh_config_path
    if out_path == "-":
      print S.to_config(hnew)
    else:
      S.write_ssh_config(out_path, hnew)
      print "wrote", out_path

def main():
  parser = make_parser()
  opts = parser.parse_args()

  if opts.which == "sync":
    cmd_sync(opts)

if __name__ == '__main__':
  main()
