#!/usr/bin/env python
#
# push-repo host
#
# Push the repo in the current directory to another host over ssh.
# First an ssh call is made to initialize a bare repo on the remote host.
# Then `git push` on the local host is called to push the repo to the
# remote host.

import os
import sys
import re
from subprocess import Popen, PIPE
import subprocess
import argparse

def init_remote_bare_repo(repodir, host):
  cmds0 = "repodir='{}'\n".format(repodir)
  cmds= cmds0 + """
    if [ -e "$repodir" ]; then
      echo already exists - "$repodir"
    else
      mkdir "$repodir"
    fi
    if [ ! -d "$repodir" ]; then
      echo "not a directory: $repodir"
      exit 1
    fi
    cd "$repodir" && git init --bare
"""
  p = Popen(['ssh', host, '/bin/sh'], stdin=PIPE)
  p.stdin.write(cmds)
  p.stdin.close()
  st = p.wait()
  return st

def push_repo(repodir, host):
  """Push the repo in the current working directory."""
  dest = "{}:{}".format(host, repodir)
  subprocess.check_call("git", "push", dest)

def die(msg):
  sys.stderr.write(msg+"\n")
  sys.exit(1)

def main():
  p = argparse.ArgumentParser("Push git repo to remote host")
  p.add_argument('host', metavar="HOST", type=str)

  opts = p.parse_args()

  host = opts.host

  # make sure we are in a git repo directory
  if not os.path.isdir(".git"):
    die("not in a git repo")

  repodir = os.path.basename( os.getcwd() )
  if not repodir.endswith(".git"):
    repodir += ".git"

  st = init_remote_bare_repo(repodir, host)
  if st != 0:
    die("unable to initialize bare repo {} on host {}".format(repodir, host))
  push_repo(repodir, host)

if __name__ == '__main__':
  main()

